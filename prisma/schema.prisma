// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  // output   = "../src/generated/prisma"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id                    String    @id
  name                  String
  email                 String
  emailVerified         Boolean
  image                 String?
  credits               Int       @default(10)
  stripeCustomerId      String?   @unique
  youtubeChannelId      String?   @unique
  youtubeChannelTitle   String?
  createdAt             DateTime
  updatedAt             DateTime
  sessions              Session[]
  accounts              Account[]
  projects              Project[]
  clips                 Clip[]

  @@unique([email])
  @@map("user")
}

model Session {
  id        String   @id
  expiresAt DateTime
  token     String
  createdAt DateTime
  updatedAt DateTime
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([token])
  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime
  updatedAt             DateTime

  @@map("account")
}

model Verification {
  id         String    @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@map("verification")
}

enum ProjectSource {
  UPLOADED_FILE
  YOUTUBE_CHANNEL
  VIDEO_URL
}

model Project {
  id           String  @id @default(uuid())
  // For uploaded files we keep s3Key, for external sources we can store externalUrl
  s3Key        String?
  externalUrl  String?
  displayName  String?
  thumbnailUrl String?

  source       ProjectSource @default(UPLOADED_FILE)
  status       String        @default("queued") // processing, processed, no credits
  uploaded     Boolean       @default(false)
  clipCount    Int           @default(1)
  captionStyle Int           @default(1)
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt

  Clip Clip[]

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String

  @@index([s3Key])
  @@map("UploadedFile") // Keep existing table name for seamless migration
}

model Clip {
  id        String   @id @default(uuid())
  s3Key     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  project   Project? @relation(fields: [projectId], references: [id], onDelete: Cascade)
  projectId String?  @map("uploadedFileId")

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String

  @@index([s3Key])
}
