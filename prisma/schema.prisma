generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id                  String    @id
  name                String
  email               String    @unique
  emailVerified       Boolean
  image               String?
  credits             Int       @default(10)
  stripeCustomerId    String?   @unique
  createdAt           DateTime
  updatedAt           DateTime
  youtubeChannelId    String?   @unique
  youtubeChannelTitle String?
  clips               Clip[]
  projects            Project[]
  accounts            Account[]
  sessions            Session[]

  @@map("user")
}

model Session {
  id        String   @id
  expiresAt DateTime
  token     String
  createdAt DateTime
  updatedAt DateTime
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([token])
  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime
  updatedAt             DateTime
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("account")
}

model Verification {
  id         String    @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@map("verification")
}

model Project {
  id            String        @id @default(uuid())
  s3Key         String?
  displayName   String?
  uploaded      Boolean       @default(false)
  status        String        @default("queued")
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  userId        String
  clipCount     Int           @default(1)
  captionStyle  Int           @default(1)
  externalUrl   String?
  source        ProjectSource @default(UPLOADED_FILE)
  thumbnailUrl  String?
  failureReason String?
  Clip          Clip[]
  user          User          @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([s3Key])
  @@map("UploadedFile")
}

model Clip {
  id              String   @id @default(uuid())
  s3Key           String?  // legacy key for backward compatibility with existing clips
  rawClipUrl      String?  // new field for raw clips from backend
  renderedClipUrl String?  // Will be null until the user exports the final video
  transcript      Json?    // Store the word-level transcript from the backend
  hook            String?  // The AI-generated hook
  captionsStyle   Json?
  hookStyle       Json?
  start           Float?   // Start time in seconds from the original video
  end             Float?   // End time in seconds from the original video
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  project   Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
  projectId String  @map("uploadedFileId")

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String

  @@index([rawClipUrl])
  @@index([s3Key])
}

enum ProjectSource {
  UPLOADED_FILE
  YOUTUBE_CHANNEL
  VIDEO_URL
}
