// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  // output   = "../src/generated/prisma"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id            String    @id
  name          String
  email         String
  emailVerified Boolean
  image         String?
  credits       Int @default(10)
  stripeCustomerId String? @unique
  createdAt     DateTime
  updatedAt     DateTime
  sessions      Session[]
  accounts      Account[]

  @@unique([email])
  @@map("user")
  UploadedFile UploadedFile[]
  clips Clip[]
}

model Session {
  id        String   @id
  expiresAt DateTime
  token     String
  createdAt DateTime
  updatedAt DateTime
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([token])
  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime
  updatedAt             DateTime

  @@map("account")
}

model Verification {
  id         String    @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@map("verification")
}

model UploadedFile {
  id String @id @default(cuid())
  s3Key String
  displayName String?
  uploaded Boolean @default(false)
  status String @default("queued") // processing, processed, no credits
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  clipCount Int  @default(1)
  captionStyle Int @default(1)
  Clip Clip[]

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String

  @@index([s3Key])
}

model Clip {
  id String @id @default(cuid())
  s3Key String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  uploadedFile UploadedFile? @relation(fields: [uploadedFileId], references: [id], onDelete: Cascade)
  uploadedFileId String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String

  @@index([s3Key])
}